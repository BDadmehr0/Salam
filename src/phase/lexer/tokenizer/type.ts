export enum TokenKeywordType {
    TOKEN_IDENTIFIER = "IDENTIFIER",
    TOKEN_IF = "IF",
    TOKEN_ELSE = "ELSE",
    TOKEN_PRINT = "PRINT",
    TOKEN_FN = "FN",
    TOKEN_FOR = "FOR",
    TOKEN_WHILE = "WHILE",
    TOKEN_REPEAT = "REPEAT",
    TOKEN_DO = "DO",
    TOKEN_RET = "RET",
    TOKEN_BREAK = "BREAK",
    TOKEN_CONTINUE = "CONTINUE",
    TOKEN_LAYOUT = "LAYOUT",
    // TOKEN_BLOCK_BEGIN = "BLOCK_BEGIN",
    TOKEN_BLOCK_END = "BLOCK_END",
};

export enum TokenValueType {
    TOKEN_STRING = "STRING",
    TOKEN_NUMBER_FLOAT = "NUMBER_FLOAT",
    TOKEN_NUMBER_INT = "NUMBER_INT",
    TOKEN_BOOL_TRUE = "BOOL_TRUE",
    TOKEN_BOOL_FALSE = "BOOL_FALSE",
};

export enum TokenOperatorType {
    TOKEN_NOT_EQUAL = "NOT_EQUAL",
    TOKEN_EQUAL = "EQUAL",
    TOKEN_AND_AND = "AND_AND",
    TOKEN_OR_OR = "OR_OR",
    TOKEN_LESS_EQUAL = "LESS_EQUAL",
    TOKEN_GREATER_EQUAL = "GREATER_EQUAL",
    TOKEN_INCREMENT = "INCREMENT",
    TOKEN_DECREMENT = "DECREMENT",
    TOKEN_SHIFT_LEFT = "SHIFT_LEFT",
    TOKEN_SHIFT_RIGHT = "SHIFT_RIGHT",
    TOKEN_SHIFT_RIGHT_ASSIGN = "SHIFT_RIGHT_ASSIGN",
    TOKEN_SHIFT_LEFT_ASSIGN = "SHIFT_LEFT_ASSIGN",
    TOKEN_LEFT_BRACE = "LEFT_BRACE",
    TOKEN_RIGHT_BRACE = "RIGHT_BRACE",
    TOKEN_LEFT_BRACKET = "LEFT_BRACKET",
    TOKEN_RIGHT_BRACKET = "RIGHT_BRACKET",
    TOKEN_COLON = "COLON",
    TOKEN_COLON_COLON = "COLON_COLON",
    TOKEN_COMMA = "COMMA",
    TOKEN_LEFT_PAREN = "LEFT_PAREN",
    TOKEN_RIGHT_PAREN = "RIGHT_PAREN",
    TOKEN_PLUS = "PLUS",
    TOKEN_MINUS = "MINUS",
    TOKEN_MULTIPLY = "MULTIPLY",
    TOKEN_DIVIDE = "DIVIDE",
    // TOKEN_DIVIDE_INT = "DIVIDE_INT",
    TOKEN_MOD = "MOD",
    TOKEN_POWER = "POWER",
    TOKEN_ASSIGN = "ASSIGN",
    TOKEN_LESS = "LESS",
    TOKEN_GREATER = "GREATER",
    TOKEN_NOT = "NOT",
    TOKEN_AND_BIT = "AND_BIT",
    TOKEN_OR_BIT = "OR_BIT",
    TOKEN_XOR_BIT = "XOR_BIT",
    TOKEN_MEMBER = "MEMBER",
    TOKEN_RANGE = "RANGE",
    // TOKEN_BLOCK_BEGIN = "BLOCK_BEGIN",
    // TOKEN_BLOCK_END = "BLOCK_END",
};

export enum TokenOtherType {
    TOKEN_ERROR = "ERROR",
    TOKEN_EOF = "EOF",
};

export type TokenType = TokenKeywordType | TokenValueType | TokenOperatorType | TokenOtherType;

export const operatorTypeMaps: Record<string, TokenType> = {
    "!=": TokenOperatorType.TOKEN_NOT_EQUAL,
    "==": TokenOperatorType.TOKEN_EQUAL,
    "===": TokenOperatorType.TOKEN_EQUAL,
    "&&": TokenOperatorType.TOKEN_AND_AND,
    "||": TokenOperatorType.TOKEN_OR_OR,
    "<=": TokenOperatorType.TOKEN_LESS_EQUAL,
    ">=": TokenOperatorType.TOKEN_GREATER_EQUAL,
    "++": TokenOperatorType.TOKEN_INCREMENT,
    "＋＋": TokenOperatorType.TOKEN_INCREMENT,
    "﹢﹢": TokenOperatorType.TOKEN_INCREMENT,
    "--": TokenOperatorType.TOKEN_DECREMENT,
    "−−": TokenOperatorType.TOKEN_DECREMENT,
    "<<": TokenOperatorType.TOKEN_SHIFT_LEFT,
    ">>": TokenOperatorType.TOKEN_SHIFT_RIGHT,
    ">>=": TokenOperatorType.TOKEN_SHIFT_RIGHT_ASSIGN,
    "<<=": TokenOperatorType.TOKEN_SHIFT_LEFT_ASSIGN,
    "{": TokenOperatorType.TOKEN_LEFT_BRACE,
    "}": TokenOperatorType.TOKEN_RIGHT_BRACE,
    "[": TokenOperatorType.TOKEN_LEFT_BRACKET,
    "]": TokenOperatorType.TOKEN_RIGHT_BRACKET,
    ":": TokenOperatorType.TOKEN_COLON,
    "::": TokenOperatorType.TOKEN_COLON_COLON,
    ",": TokenOperatorType.TOKEN_COMMA,
    "(": TokenOperatorType.TOKEN_LEFT_PAREN,
    ")": TokenOperatorType.TOKEN_RIGHT_PAREN,
    "+": TokenOperatorType.TOKEN_PLUS,
    "﹢": TokenOperatorType.TOKEN_PLUS,
    "＋": TokenOperatorType.TOKEN_PLUS,
    "-": TokenOperatorType.TOKEN_MINUS,
    "−": TokenOperatorType.TOKEN_MINUS,
    "->": TokenOperatorType.TOKEN_MEMBER,
    "−>": TokenOperatorType.TOKEN_MEMBER,
    ".": TokenOperatorType.TOKEN_MEMBER,
    "..": TokenOperatorType.TOKEN_RANGE,
    "*": TokenOperatorType.TOKEN_MULTIPLY,
    "×": TokenOperatorType.TOKEN_MULTIPLY,
    "/": TokenOperatorType.TOKEN_DIVIDE,
    // "//": TokenOperatorType.TOKEN_DIVIDE_INT,
    "÷": TokenOperatorType.TOKEN_DIVIDE,
    // "÷÷": TokenOperatorType.TOKEN_DIVIDE_INT,
    "%": TokenOperatorType.TOKEN_MOD,
    "**": TokenOperatorType.TOKEN_POWER,
    "××": TokenOperatorType.TOKEN_POWER,
    "=": TokenOperatorType.TOKEN_ASSIGN,
    "⩵": TokenOperatorType.TOKEN_EQUAL,
    "<": TokenOperatorType.TOKEN_LESS,
    ">": TokenOperatorType.TOKEN_GREATER,
    "!": TokenOperatorType.TOKEN_NOT,
    "&": TokenOperatorType.TOKEN_AND_BIT,
    "|": TokenOperatorType.TOKEN_OR_BIT,
    "^": TokenOperatorType.TOKEN_XOR_BIT,
    "~": TokenOperatorType.TOKEN_XOR_BIT,
};
