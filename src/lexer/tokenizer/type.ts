export enum TokenType {
    // Values
    TOKEN_STRING,
    TOKEN_IDENTIFIER,
    TOKEN_BOOLEAN,
    TOKEN_NUMBER_FLOAT,
    TOKEN_NUMBER_INT,
    TOKEN_BOOL_TRUE,
    TOKEN_BOOL_FALSE,

    // Words
    TOKEN_IF,
    TOKEN_ELSE,
    TOKEN_PRINT,
    TOKEN_FN,
    TOKEN_FOR,
    TOKEN_WHILE,
    TOKEN_REPEAT,
    TOKEN_DO,
    TOKEN_RET,
    TOKEN_BREAK,
    TOKEN_CONTINUE,
    TOKEN_LAYOUT,
    TOKEN_BLOCK_BEGIN,
    TOKEN_BLOCK_END,

    // Operators
    TOKEN_NOT_EQUAL,
    TOKEN_EQUAL,
    TOKEN_AND_AND,
    TOKEN_OR_OR,
    TOKEN_LESS_EQUAL,
    TOKEN_GREATER_EQUAL,
    TOKEN_INCREMENT,
    TOKEN_DECREMENT,
    TOKEN_SHIFT_LEFT,
    TOKEN_SHIFT_RIGHT,
    TOKEN_SHIFT_RIGHT_ASSIGN,
    TOKEN_SHIFT_LEFT_ASSIGN,
    TOKEN_LEFT_BRACE,
    TOKEN_RIGHT_BRACE,
    TOKEN_LEFT_BRACKET,
    TOKEN_RIGHT_BRACKET,
    TOKEN_COLON,
    TOKEN_COLON_COLON,
    TOKEN_COMMA,
    TOKEN_LEFT_PAREN,
    TOKEN_RIGHT_PAREN,
    TOKEN_PLUS,
    TOKEN_MINUS,
    TOKEN_MULTIPLY,
    TOKEN_DIVIDE,
    TOKEN_DIVIDE_INT,
    TOKEN_MOD,
    TOKEN_POWER,
    TOKEN_ASSIGN,
    TOKEN_LESS,
    TOKEN_GREATER,
    TOKEN_NOT,
    TOKEN_AND_BIT,
    TOKEN_OR_BIT,
    TOKEN_XOR_BIT,
    TOKEN_MEMBER,
    TOKEN_RANGE,

    // Others
    TOKEN_ERROR,
    TOKEN_EOF,
};

export const operatorTypeMaps: Record<string, TokenType> = {
    "!=": TokenType.TOKEN_NOT_EQUAL,
    "==": TokenType.TOKEN_EQUAL,
    "===": TokenType.TOKEN_EQUAL,
    "&&": TokenType.TOKEN_AND_AND,
    "||": TokenType.TOKEN_OR_OR,
    "<=": TokenType.TOKEN_LESS_EQUAL,
    ">=": TokenType.TOKEN_GREATER_EQUAL,
    "++": TokenType.TOKEN_INCREMENT,
    "＋＋": TokenType.TOKEN_INCREMENT,
    "﹢﹢": TokenType.TOKEN_INCREMENT,
    "--": TokenType.TOKEN_DECREMENT,
    "−−": TokenType.TOKEN_DECREMENT,
    "<<": TokenType.TOKEN_SHIFT_LEFT,
    ">>": TokenType.TOKEN_SHIFT_RIGHT,
    ">>=": TokenType.TOKEN_SHIFT_RIGHT_ASSIGN,
    "<<=": TokenType.TOKEN_SHIFT_LEFT_ASSIGN,
    "{": TokenType.TOKEN_LEFT_BRACE,
    "}": TokenType.TOKEN_RIGHT_BRACE,
    "[": TokenType.TOKEN_LEFT_BRACKET,
    "]": TokenType.TOKEN_RIGHT_BRACKET,
    ":": TokenType.TOKEN_COLON,
    "::": TokenType.TOKEN_COLON_COLON,
    ",": TokenType.TOKEN_COMMA,
    "(": TokenType.TOKEN_LEFT_PAREN,
    ")": TokenType.TOKEN_RIGHT_PAREN,
    "+": TokenType.TOKEN_PLUS,
    "﹢": TokenType.TOKEN_PLUS,
    "＋": TokenType.TOKEN_PLUS,
    "-": TokenType.TOKEN_MINUS,
    "−": TokenType.TOKEN_MINUS,
    "->": TokenType.TOKEN_MEMBER,
    ".": TokenType.TOKEN_MEMBER,
    "..": TokenType.TOKEN_RANGE,
    "*": TokenType.TOKEN_MULTIPLY,
    "×": TokenType.TOKEN_MULTIPLY,
    "/": TokenType.TOKEN_DIVIDE,
    "//": TokenType.TOKEN_DIVIDE_INT,
    "÷": TokenType.TOKEN_DIVIDE,
    "÷÷": TokenType.TOKEN_DIVIDE_INT,
    "%": TokenType.TOKEN_MOD,
    "**": TokenType.TOKEN_POWER,
    "××": TokenType.TOKEN_POWER,
    "=": TokenType.TOKEN_ASSIGN,
    "⩵": TokenType.TOKEN_EQUAL,
    "<": TokenType.TOKEN_LESS,
    ">": TokenType.TOKEN_GREATER,
    "!": TokenType.TOKEN_NOT,
    "&": TokenType.TOKEN_AND_BIT,
    "|": TokenType.TOKEN_OR_BIT,
    "^": TokenType.TOKEN_XOR_BIT,
    "~": TokenType.TOKEN_XOR_BIT,
};
