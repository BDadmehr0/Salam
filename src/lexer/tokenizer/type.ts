export enum TokenKeywordType {
    TOKEN_IDENTIFIER,
    TOKEN_IF,
    TOKEN_ELSE,
    TOKEN_PRINT,
    TOKEN_FN,
    TOKEN_FOR,
    TOKEN_WHILE,
    TOKEN_REPEAT,
    TOKEN_DO,
    TOKEN_RET,
    TOKEN_BREAK,
    TOKEN_CONTINUE,
    TOKEN_LAYOUT,
    // TOKEN_BLOCK_BEGIN,
    TOKEN_BLOCK_END,
};

export enum TokenValueType {
    TOKEN_STRING,
    TOKEN_BOOLEAN,
    TOKEN_NUMBER_FLOAT,
    TOKEN_NUMBER_INT,
    TOKEN_BOOL_TRUE,
    TOKEN_BOOL_FALSE,
};

export enum TokenOperatorType {
    // TOKEN_BLOCK_BEGIN,
    // TOKEN_BLOCK_END,
    TOKEN_NOT_EQUAL,
    TOKEN_EQUAL,
    TOKEN_AND_AND,
    TOKEN_OR_OR,
    TOKEN_LESS_EQUAL,
    TOKEN_GREATER_EQUAL,
    TOKEN_INCREMENT,
    TOKEN_DECREMENT,
    TOKEN_SHIFT_LEFT,
    TOKEN_SHIFT_RIGHT,
    TOKEN_SHIFT_RIGHT_ASSIGN,
    TOKEN_SHIFT_LEFT_ASSIGN,
    TOKEN_LEFT_BRACE,
    TOKEN_RIGHT_BRACE,
    TOKEN_LEFT_BRACKET,
    TOKEN_RIGHT_BRACKET,
    TOKEN_COLON,
    TOKEN_COLON_COLON,
    TOKEN_COMMA,
    TOKEN_LEFT_PAREN,
    TOKEN_RIGHT_PAREN,
    TOKEN_PLUS,
    TOKEN_MINUS,
    TOKEN_MULTIPLY,
    TOKEN_DIVIDE,
    TOKEN_DIVIDE_INT,
    TOKEN_MOD,
    TOKEN_POWER,
    TOKEN_ASSIGN,
    TOKEN_LESS,
    TOKEN_GREATER,
    TOKEN_NOT,
    TOKEN_AND_BIT,
    TOKEN_OR_BIT,
    TOKEN_XOR_BIT,
    TOKEN_MEMBER,
    TOKEN_RANGE,
};

const MergedEnum = Object.assign(
    {},
    TokenKeywordType,
    TokenValueType,
    TokenOperatorType,
    {
        TOKEN_ERROR: 900,
        TOKEN_EOF: 901,
    }
);

export type TokenType = typeof MergedEnum;

// export const TOKEN_BLOCK_BEGIN = [TokenKeywordType, TokenKeywordType.TOKEN_BLOCK_BEGIN];
// export const TOKEN_BLOCK_BEGIN = [TokenType, MergedEnum.TOKEN_COLON];
// export const TOKEN_BLOCK_END = [TokenKeywordType, TokenKeywordType.TOKEN_BLOCK_END];

export const operatorTypeMaps: Record<string, TokenType> = {
    "!=": MergedEnum.TOKEN_NOT_EQUAL,
    "==": MergedEnum.TOKEN_EQUAL,
    "===": MergedEnum.TOKEN_EQUAL,
    "&&": MergedEnum.TOKEN_AND_AND,
    "||": MergedEnum.TOKEN_OR_OR,
    "<=": MergedEnum.TOKEN_LESS_EQUAL,
    ">=": MergedEnum.TOKEN_GREATER_EQUAL,
    "++": MergedEnum.TOKEN_INCREMENT,
    "＋＋": MergedEnum.TOKEN_INCREMENT,
    "﹢﹢": MergedEnum.TOKEN_INCREMENT,
    "--": MergedEnum.TOKEN_DECREMENT,
    "−−": MergedEnum.TOKEN_DECREMENT,
    "<<": MergedEnum.TOKEN_SHIFT_LEFT,
    ">>": MergedEnum.TOKEN_SHIFT_RIGHT,
    ">>=": MergedEnum.TOKEN_SHIFT_RIGHT_ASSIGN,
    "<<=": MergedEnum.TOKEN_SHIFT_LEFT_ASSIGN,
    "{": MergedEnum.TOKEN_LEFT_BRACE,
    "}": MergedEnum.TOKEN_RIGHT_BRACE,
    "[": MergedEnum.TOKEN_LEFT_BRACKET,
    "]": MergedEnum.TOKEN_RIGHT_BRACKET,
    ":": MergedEnum.TOKEN_COLON,
    "::": MergedEnum.TOKEN_COLON_COLON,
    ",": MergedEnum.TOKEN_COMMA,
    "(": MergedEnum.TOKEN_LEFT_PAREN,
    ")": MergedEnum.TOKEN_RIGHT_PAREN,
    "+": MergedEnum.TOKEN_PLUS,
    "﹢": MergedEnum.TOKEN_PLUS,
    "＋": MergedEnum.TOKEN_PLUS,
    "-": MergedEnum.TOKEN_MINUS,
    "−": MergedEnum.TOKEN_MINUS,
    "->": MergedEnum.TOKEN_MEMBER,
    ".": MergedEnum.TOKEN_MEMBER,
    "..": MergedEnum.TOKEN_RANGE,
    "*": MergedEnum.TOKEN_MULTIPLY,
    "×": MergedEnum.TOKEN_MULTIPLY,
    "/": MergedEnum.TOKEN_DIVIDE,
    "//": MergedEnum.TOKEN_DIVIDE_INT,
    "÷": MergedEnum.TOKEN_DIVIDE,
    "÷÷": MergedEnum.TOKEN_DIVIDE_INT,
    "%": MergedEnum.TOKEN_MOD,
    "**": MergedEnum.TOKEN_POWER,
    "××": MergedEnum.TOKEN_POWER,
    "=": MergedEnum.TOKEN_ASSIGN,
    "⩵": MergedEnum.TOKEN_EQUAL,
    "<": MergedEnum.TOKEN_LESS,
    ">": MergedEnum.TOKEN_GREATER,
    "!": MergedEnum.TOKEN_NOT,
    "&": MergedEnum.TOKEN_AND_BIT,
    "|": MergedEnum.TOKEN_OR_BIT,
    "^": MergedEnum.TOKEN_XOR_BIT,
    "~": MergedEnum.TOKEN_XOR_BIT,
};
